plugins {
    id 'net.researchgate.release' version '2.6.0'
    id "com.gorylenko.gradle-git-properties" version "2.0.0"
}


plugins {
    id 'org.springframework.boot' version '2.1.4.RELEASE'
    id 'java'
}

apply plugin: 'io.spring.dependency-management'

group = 'ru.nyrk'
sourceCompatibility = '1.8'

repositories {
    mavenCentral()
}

bootJar {
    launchScript()
}

springBoot {
    buildInfo()
}

ext {
    set('springBootAdminVersion', '2.1.3')
    set('springCloudVersion', 'Greenwich.SR1')
}

dependencies {
    implementation('org.springframework.boot:spring-boot-starter-actuator')
    implementation('org.springframework.cloud:spring-cloud-starter-config')
    implementation('org.springframework.retry:spring-retry')
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-server'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

dependencyManagement {
    imports {
        mavenBom "de.codecentric:spring-boot-admin-dependencies:${springBootAdminVersion}"
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

task releaseBuild {
    dependsOn(":assemble")
}
release {
    failOnCommitNeeded = true
    failOnPublishNeeded = true
    failOnSnapshotDependencies = true
    failOnUnversionedFiles = true
    failOnUpdateNeeded = true
    revertOnFail = true
    preCommitText = ''
    preTagCommitMessage = '[skip ci] pre tag commit: '
    tagCommitMessage = '[skip ci] creating tag: '
    newVersionCommitMessage = '[skip ci] rel:'
    tagTemplate = '${version}'
    versionPropertyFile = 'gradle.properties'
    versionProperties = []
    buildTasks = ['releaseBuild']
//    versionPatterns = [
//            /(\d+)([^\d]*$)/: { Matcher m, Project p -> m.replaceAll("${(m[0][1] as int) + 1}${m[0][2]}") }
//    ]
    scmAdapters = [net.researchgate.release.GitAdapter]

    git {
        requireBranch = /prod\/.*/
        pushToRemote = 'origin'
        pushToBranchPrefix = ''
        commitVersionFileOnly = true
        signTag = false
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
apply plugin: 'maven-publish'
publishing {
    publications {
        bootJava(MavenPublication) {
            artifact bootJar
        }
    }
    repositories {
        maven {
            credentials {
                username findProperty("username")
                password findProperty("password")
            }
            def dir = 'https://dev.agria.pro/nexus/repository'
            def releasesRepoUrl = "${dir}/maven-releases"
            def snapshotsRepoUrl = "${dir}/maven-snapshots"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        }
    }
}

afterReleaseBuild.dependsOn publish